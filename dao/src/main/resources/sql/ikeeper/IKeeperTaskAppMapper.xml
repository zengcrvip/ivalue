<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.axon.market.dao.mapper.ikeeper.IKeeperTaskAppMapper">

    <resultMap id="taskInstDetailShow" type="com.axon.market.common.domain.ikeeper.TaskInstDetailShowDomain">
        <result property="detailId" column="detailId"></result>
        <result property="taskName" column="taskName"></result>
        <result property="expDate" column="expDate"></result>
        <result property="effDate" column="effDate"></result>
        <result property="customerName" column="customerName"></result>
        <result property="customerId" column="customerId"></result>
        <result property="telephone" column="telephone"></result>
        <result property="smsContent" column="smsContent"></result>
        <result property="callContent" column="callContent"></result>
        <result property="smsResult" column="smsResult"></result>
        <result property="callResult" column="callResult"></result>
        <collection property="welfare" javaType="ArrayList" ofType="java.util.Map">
            <result property="welfareId" column="welfareId"></result>
            <result property="welfareName" column="welfareName"></result>
        </collection>
    </resultMap>

    <resultMap id="welfareProducts" type="java.util.Map">
        <result property="welfareName" column="welfareName"></result>
        <result property="welfareContent" column="welfareContent"></result>
        <collection property="products" javaType="ArrayList" ofType="java.util.Map">
            <result property="productId" column="productId"></result>
            <result property="productName" column="productName"></result>
        </collection>
    </resultMap>

    <select id="queryMyKeeperTaskInstGroupDetail" resultType="java.util.Map">
        select
          d.state                                     as state,
          d.type_id                                   as typeId,
          t.type_name                                 as typeName,
          count(1)                                   as userCount
        from keeper.keeper_task_inst_detail d
        left join keeper.keeper_type t on d.type_id = t.type_id and t.type_classify = 1
        left join keeper.keeper_task_inst i on d.task_inst_id = i.task_inst_id
        where i.state = 1
        and i.exec_date = date_format(now(),'%Y%m%d')
        and i.exec_user_id = #{userId}
        and ((d.exp_time >= sysdate() and d.type_id = 3 ) or d.type_id != 3) and d.state in (1,2,3)
        group by d.task_inst_id,d.type_id,d.state
        union all
        select
          4                                           as state,
          d.type_id                                   as typeId,
          t.type_name                                 as typeName,
          count(1)                                   as userCount
        from keeper.keeper_task_inst_detail d
        left join keeper.keeper_type t on d.type_id = t.type_id and t.type_classify = 1
        left join keeper.keeper_task_inst i on d.task_inst_id = i.task_inst_id
        where i.state = 1
        and i.exec_date = date_format(now(),'%Y%m%d')
        and i.exec_user_id = #{userId}
        and ((d.exp_time &lt; sysdate() and d.type_id = 3 and d.state != 3) or d.state = 4)
        group by d.task_inst_id,d.type_id
    </select>

    <select id="queryTaskInstDetailsByStateAndType" resultMap="taskInstDetailShow">
        select
            d.detail_id                                             as detailId,
            i.task_name                                             as taskName,
            i.exp_date                                              as expDate,
            i.eff_date                                              as effDate,
            d.cust_name                                             as customerName,
            d.telephone                                             as telephone,
            (select c1.channel_content from keeper.keeper_task_channel c1 where c1.task_id = i.task_id and c1.channel_type = 1)	as smsContent,
            (select c2.channel_content from keeper.keeper_task_channel c2 where c2.task_id = i.task_id and c2.channel_type = 2)	as callContent,
            w.welfare_id                                            as welfareId,
            w.welfare_name						                    as welfareName,
            d.sms_result                                            as smsResult,
            d.call_result                                           as callResult
        from keeper.keeper_task_inst_detail d
        left join keeper.keeper_task_inst i on d.task_inst_id = i.task_inst_id
        left join keeper.keeper_welfare w on find_in_set(w.welfare_id,i.welfare_ids)
        where 1 = 1
        <if test="state == 4">
            and (d.state = 4 or (d.type_id = 3 and d.state in (1,2) and d.exp_time &lt; sysdate()))
        </if>
        <if test="state == 3">
            and d.state = 3
        </if>
        <if test="state == 1 or state == 2">
            and d.state = #{state} and (#{typeId} != 3 or  d.exp_time >= sysdate() )
        </if>
        and d.type_id = #{typeId}
        and i.state = 1
        and i.exec_date = date_format(now(),'%Y%m%d')
        and i.exec_user_id = #{userId}
    </select>

    <select id="queryTaskInstGroupCountByType" resultType="java.util.Map">
      select
        t.stateType as stateType, count(1) as stateCount
      from (
            select
                d.state as stateType
            from keeper.keeper_task_inst_detail d
            left join keeper.keeper_task_inst i on d.task_inst_id = i.task_inst_id
            where d.type_id = #{typeId}
            and ((((d.exp_time >= sysdate() and d.type_id = 3 ) or d.type_id != 3) and d.state in (1,2)) or d.state = 3)
            and i.state = 1
            and i.exec_date = date_format(now(),'%Y%m%d')
            and i.exec_user_id = #{userId}
            group by d.task_inst_id,d.state
            union all
            select
                4 as stateType
            from keeper.keeper_task_inst_detail d
            left join keeper.keeper_task_inst i on d.task_inst_id = i.task_inst_id
            where d.type_id = #{typeId}
            and (d.state = 4 or (d.state in (1,2) and d.type_id = 3 and d.exp_time &lt; sysdate()))
            and i.state = 1
            and i.exec_date = date_format(now(),'%Y%m%d')
            and i.exec_user_id = #{userId}
            group by d.task_inst_id
      ) as t group by t.stateType
    </select>

    <select id="queryWelfareProductsByWelfareId" resultMap="welfareProducts">
        select
          w.welfare_name                                as welfareName,
          w.comments                                    as welfareContent,
          p.product_id                                  as productId,
          p.product_name                                as productName
        from keeper.keeper_welfare w
        left join keeper.keeper_product p on find_in_set(p.product_id,w.product_ids)
        where w.welfare_id = #{welfareId}
    </select>

    <select id="queryEffectiveTaskDetailById" resultType="com.axon.market.common.domain.ikeeper.TaskInstDetailDomain">
        select
            d.detail_id                 as detailId,
            d.task_inst_id              as taskInstId,
            d.type_id                   as typeId,
            d.cust_name                 as customerName,
            d.telephone                 as telephone,
            d.sms_result                as smsResult,
            d.call_times                as callTimes,
            d.call_result               as callResult,
            d.it_times                  as itTimes,
            d.state                     as state,
            d.exp_time                  as expTime
        from keeper.keeper_task_inst_detail d
        where (d.type_id !=3 or ( d.type_id = 3 and d.exp_time >= sysdate())) and d.state in (1,2) and d.detail_id = #{detailId}
    </select>

    <select id="queryTaskInstByUserAndTask" resultType="com.axon.market.common.domain.ikeeper.TaskInstDomain">
        select
            i.task_inst_id                      as taskInstId,
            i.exec_date                         as execDate,
            i.exec_user_id                      as execUserId,
            i.task_id                           as taskId,
            i.task_name                         as taskName,
            i.type_id                           as typeId,
            i.eff_date                          as effDate,
            i.exp_date                          as expDate,
            i.create_time                       as createTime,
            i.welfare_ids                       as welfareIds,
            i.state                             as state
        from keeper.keeper_task_inst i
        where i.exec_user_id = #{interfaceUserId}
        and i.task_id = #{taskId}
        and i.exec_date = date_format(now(),'%Y%m%d')
    </select>

    <select id="queryBatchSmsTaskTemplates" resultType="java.util.Map">
        select
            i.task_id                          as taskId,
            i.task_name                        as taskName,
            c.channel_content                  as smsContent,
            count(0)                          as customerCount
        from keeper.keeper_task_inst i
        left join keeper.keeper_task_channel c on i.task_id = c.task_id
        left join keeper.keeper_task_inst_detail d on d.task_inst_id = i.task_inst_id
        where i.exec_user_id = #{userId} and i.type_id = #{typeId} and c.channel_type = 1
        and i.exec_date = date_format(now(),'%Y%m%d')
        and i.state = 1
        and d.state = #{state}
        and ((d.type_id = 3 and d.exp_time >= sysdate()) or d.type_id != 3)
        and d.sms_result not in (1,2)
        group by i.task_id
    </select>

    <select id="queryBatchSmsTaskDetails" resultType="java.util.Map">
        select
            i.task_id                          as taskId,
            c.channel_content                  as smsContent,
            c.channel_phone                    as accessNumber,
            d.telephone                        as telephone,
            d.detail_id                        as detailId
        from keeper.keeper_task_inst i
        left join keeper.keeper_task_channel c on i.task_id = c.task_id
        left join keeper.keeper_task_inst_detail d on d.task_inst_id = i.task_inst_id
        where i.exec_user_id = #{userId} and i.type_id = #{typeId} and c.channel_type = 1
        and i.exec_date = date_format(now(),'%Y%m%d')
        and i.state = 1
        and d.state = #{state}
        and d.type_id != 3
        and d.sms_result not in (1,2)
        and find_in_set(i.task_id,#{selectedTaskIds})
    </select>

    <select id="queryTaskChannelByDetailId" resultType="com.axon.market.common.domain.ikeeper.TaskChannelDomain">
        select
            tc.id                               as id,
            tc.task_id                          as taskId,
            tc.channel_type                     as channelType,
            tc.channel_phone                    as channelPhone,
            tc.channel_content                  as channelContent,
            tc.trigger_limit                    as triggerLimit
        from keeper.keeper_task_channel tc
        left join keeper.keeper_task_inst i on tc.task_id = i.task_id
        left join keeper.keeper_task_inst_detail d on d.task_inst_id = i.task_inst_id
        where tc.channel_type = #{channelType} and d.detail_id = #{detailId}
    </select>

    <select id="queryTaskInstDetailByDetailId"  resultType="com.axon.market.common.domain.ikeeper.TaskInstDetailDomain">
        select
        d.detail_id                 as detailId,
        d.task_inst_id              as taskInstId,
        d.type_id                   as typeId,
        d.cust_name                 as customerName,
        d.telephone                 as telephone,
        d.sms_result                as smsResult,
        d.call_times                as callTimes,
        d.call_result               as callResult,
        d.it_times                  as itTimes,
        d.state                     as state,
        d.exp_time                  as expTime
        from keeper.keeper_task_inst_detail d
        where d.detail_id = #{detailId}
    </select>

    <select id="queryTaskInstByDetailId" resultType="com.axon.market.common.domain.ikeeper.TaskInstDomain">
        select
            i.task_inst_id                      as taskInstId,
            i.exec_date                         as execDate,
            i.exec_user_id                      as execUserId,
            i.task_id                           as taskId,
            i.task_name                         as taskName,
            i.type_id                           as typeId,
            i.eff_date                          as effDate,
            i.exp_date                          as expDate,
            i.create_time                       as createTime,
            i.welfare_ids                       as welfareIds,
            i.state                             as state
        from keeper.keeper_task_inst_detail d
        left join keeper.keeper_task_inst i on d.task_inst_id = i.task_inst_id
        where d.detail_id = #{detailId}
    </select>

    <select id="queryMaintainedCustomerUnderTaskRecords" resultType="com.axon.market.common.domain.ikeeper.TaskInstRecordDomain">
        select
            r.id                                as id,
            r.exec_date                         as execDate,
            r.phone                             as phone,
            r.execute_type                      as executeType,
            r.exec_user_id                      as execUserId,
            r.task_id                           as taskId,
            r.type_id                           as typeId
        from keeper.keeper_task_inst_record r
    </select>

    <insert id="insertTaskInstResult" parameterType="com.axon.market.common.domain.ikeeper.TaskInstResultDomain" useGeneratedKeys="true" keyProperty="id">
        insert into keeper.keeper_task_inst_result
        (
            detail_id,
            result_type,
            result_desc,
            result_status,
            trigger_time
        )
        values
        (
            #{detailId},
            #{resultType},
            #{resultDesc},
            #{resultStatus},
            sysdate()
        )
    </insert>

    <insert id="insertTaskInst" parameterType="com.axon.market.common.domain.ikeeper.TaskInstDomain" useGeneratedKeys="true" keyProperty="taskInstId">
        insert into keeper.keeper_task_inst
        (
            exec_date,
            exec_user_id,
            task_id,
            task_name,
            type_id,
            eff_date,
            exp_date,
            create_time,
            welfare_ids,
            state
        )
        values
        (
            #{execDate},
            #{execUserId},
            #{taskId},
            #{taskName},
            #{typeId},
            #{effDate},
            #{expDate},
            sysdate(),
            #{welfareIds},
            #{state}
        )
    </insert>

    <insert id="insertMaintainedCustomerUnderTaskRecord">
        insert into keeper.keeper_task_inst_record
        (
            exec_date,
            phone,
            execute_type,
            exec_user_id,
            task_id,
            type_id,
            execute_time
        )
        select
            date_format(now(),'%Y%m%d'),
            d.telephone,
            #{type},
            i.exec_user_id,
            i.task_id,
            i.type_id,
            sysdate()
        from keeper.keeper_task_inst_detail d left join keeper.keeper_task_inst i on d.task_inst_id = i.task_inst_id
        where i.exec_date = date_format(now(),'%Y%m%d') and  find_in_set(d.detail_id, #{detailIds})
    </insert>

    <update id="updateMaintainOperationStatus">
        update keeper.keeper_task_inst_detail d set
            <if test="operateType == 'sms'">
                d.sms_result = 1,
                d.state = if(d.call_result in(1,2), 3, 2),
            </if>
            <if test="operateType == 'call'">
                d.call_times = 1 + d.call_times,
                d.call_result = if(d.call_times >= #{callLimit}, 1, d.call_result),
                d.state = if(d.call_result = 1 and d.sms_result in (1, 2), 3, 2),
            </if>
            <if test="operateType == 'feedBack'">
                d.call_result = if(d.call_result = 1, 1,#{status}),
                d.state = if(d.call_result = 1 and d.sms_result in (1, 2), 3, 2),
            </if>
            d.detail_id = #{detailId}
        where d.detail_id = #{detailId}
        <if test="operateType == 'sms'">
            and d.sms_result not in (1, 2)
        </if>
        <if test="operateType == 'call'">
            and d.call_result not in (1, 2)
        </if>
        <if test="operateType == 'feedBack'">
            and d.call_result != 2
        </if>
    </update>

    <update id="forwardingTask">
        update keeper.keeper_task_inst_detail d set
          d.task_inst_id = #{taskInstId}
        where d.detail_id = #{detailId}
    </update>

    <update id="confirmTaskInstResult">
        update keeper.keeper_task_inst_result r set
            r.confirm_result        = #{confirmResult},
            r.business_tendency     = #{businessTendency},
            r.confirm_time          = sysdate()
        where r.id = #{id}
    </update>

    <update id="batchUpdateTaskInstDetailSmsState">
        update keeper.keeper_task_inst_detail d set
            d.sms_result = 1,
            d.state = if(d.call_result = 1, 3, 2)
        where find_in_set(d.detail_id,#{detailIds})
    </update>

    <select id="queryRealTimeReminder"  resultType="java.util.Map">
          select distinct d.telephone as phone,
                  k.rule_id as ruleId
          from
                 keeper.keeper_task_inst t
          join   keeper.keeper_task_inst_detail d on t.task_inst_id = d.task_inst_id
          join   keeper.keeper_task_rule k on k.task_id = t.task_id and k.rule_id in (3,4,5)
          where t.type_id = 3
            and d.type_id = 3
            and d.exp_time > sysdate()
            and t.exec_user_id in (select user_id from keeper.keeper_user where token = #{token})
    </select>

</mapper>